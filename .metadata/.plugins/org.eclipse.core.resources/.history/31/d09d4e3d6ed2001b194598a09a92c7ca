package renderer.shapes;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Polygon;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import renderer.point.Point3D;
import renderer.point.PointConverter;
import renderer.vector.Vector3D;

public class Face {
	private Color baseColor, lightColor;
	private Point3D[] points;
	private static final double AMBIENT_LIGHTING = 0.5;
	private double lightRatio;
	
	public Face(Color color, Point3D... points) {
		this.points = new Point3D[points.length];
		for(int i = 0; i < points.length; i++) {
			this.baseColor = this.lightColor = color;
			Point3D p = points[i];
			this.points[i] = new Point3D(p.x,p.y,p.z);
		}
	}
	
	public void render(Graphics g) {
		Polygon poly = new Polygon();
		for(int i = 0; i < points.length; i++) {
			Point p = PointConverter.convertPoint(points[i]);
			poly.addPoint(p.x, p.y);
		}
		g.setColor(this.lightColor);
		g.fillPolygon(poly);
	}
	
	public void translate(double x, double y, double z) {
		for(Point3D p : points) {
			p.xOffset += x;
			p.yOffset += y;
			p.zOffset += z;
		}
	}
	
	public void rotate(double xDegrees, double yDegrees, double zDegrees, Vector3D lightVector) {
		for(Point3D p : points) {
			PointConverter.rotateAxisX(p, xDegrees);
			PointConverter.rotateAxisY(p, yDegrees);
			PointConverter.rotateAxisZ(p, zDegrees);
		}
		
		this.setLighting(lightVector);
	}
	
	public double getAverageX() {
		double sum = 0;
		
		for(Point3D p : this.points) {
			sum += p.x + p.xOffset;
		}
		
		return sum / this.points.length;
	}
	
	public void setColor(Color color) {
		this.baseColor = this.lightColor = color;
	}
	
	public static Face[] sortFaces(Face[] faces) {
		List<Face> facesList = new ArrayList<Face>();
		
		for(Face face : faces) {
			facesList.add(face);
		}
		
		Collections.sort(facesList, new Comparator<Face>() {
			@Override
			public int compare(Face p1, Face p2) {
				return p2.getAverageX() - p1.getAverageX() < 0 ? 1 : -1;
			}
		});
		
		for(int i = 0; i < faces.length; i++) {
			faces[i] = facesList.get(i);
		}
		
		return faces;
	}
	
	public void setLighting(Vector3D lightVector) {
		if(this.points.length < 3) { return; }
		
		Vector3D v1 = new Vector3D(this.points[0],this.points[1]);
		Vector3D v2 = new Vector3D(this.points[1],this.points[2]);
		Vector3D normal = Vector3D.normalize(Vector3D.cross(v2, v1)); //May need to switch order of vectors
		double dot = Vector3D.dot(normal, lightVector);
		double sign = dot < 0 ? 1 : -1;
		dot *= sign * dot;
		dot = (dot + 1) / 2 * (1 - AMBIENT_LIGHTING); //Makes dot range 0 to 0.8
		
		this.lightRatio = Math.min(1, Math.max(0, AMBIENT_LIGHTING + dot));
		this.updateLightingColor(this.lightRatio);
	}
	
	private void updateLightingColor(double lightRatio) {
		int r = (int) (this.baseColor.getRed() * lightRatio);
		int g = (int) (this.baseColor.getGreen() * lightRatio);
		int b = (int) (this.baseColor.getBlue() * lightRatio);
		this.lightColor = new Color(r,g,b);
	}
	
	private Point3D getAveragePoint() {
		double x = 0;
		double y = 0;
		double z = 0;
		for(Point3D p : this.points) {
			x += p.x + p.xOffset;
			y += p.y + p.yOffset;
			z += p.z + p.zOffset;
		}
		x /= this.points.length;
		y /= this.points.length;
		z /= this.points.length;
		
		return new Point3D(x, y, z);
	}
}
